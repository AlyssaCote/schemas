"""This is an automatically generated stub for `version3_schemas.capnp`."""
from __future__ import annotations

from contextlib import contextmanager
from io import BufferedWriter
from typing import Iterator, Literal, Sequence, overload

WorkerTypes = Literal["torch", "tensorflow", "onnx"]
Order = Literal["c", "f"]
Device = Literal["cpu", "gpu"]
NumericalType = Literal[
    "int8",
    "int16",
    "int32",
    "int64",
    "uInt8",
    "uInt16",
    "uInt32",
    "uInt64",
    "float32",
    "float64",
]

class ChannelDescriptor:
    reply: bytes
    @staticmethod
    @contextmanager
    def from_bytes(
        data: bytes,
        traversal_limit_in_words: int | None = ...,
        nesting_limit: int | None = ...,
    ) -> Iterator[ChannelDescriptorReader]: ...
    @staticmethod
    def from_bytes_packed(
        data: bytes,
        traversal_limit_in_words: int | None = ...,
        nesting_limit: int | None = ...,
    ) -> ChannelDescriptorReader: ...
    @staticmethod
    def new_message() -> ChannelDescriptorBuilder: ...
    def to_dict(self) -> dict: ...

class ChannelDescriptorReader(ChannelDescriptor):
    def as_builder(self) -> ChannelDescriptorBuilder: ...

class ChannelDescriptorBuilder(ChannelDescriptor):
    @staticmethod
    def from_dict(dictionary: dict) -> ChannelDescriptorBuilder: ...
    def copy(self) -> ChannelDescriptorBuilder: ...
    def to_bytes(self) -> bytes: ...
    def to_bytes_packed(self) -> bytes: ...
    def to_segments(self) -> list[bytes]: ...
    def as_reader(self) -> ChannelDescriptorReader: ...
    @staticmethod
    def write(file: BufferedWriter) -> None: ...
    @staticmethod
    def write_packed(file: BufferedWriter) -> None: ...

class TensorKey:
    key: bytes
    @staticmethod
    @contextmanager
    def from_bytes(
        data: bytes,
        traversal_limit_in_words: int | None = ...,
        nesting_limit: int | None = ...,
    ) -> Iterator[TensorKeyReader]: ...
    @staticmethod
    def from_bytes_packed(
        data: bytes,
        traversal_limit_in_words: int | None = ...,
        nesting_limit: int | None = ...,
    ) -> TensorKeyReader: ...
    @staticmethod
    def new_message() -> TensorKeyBuilder: ...
    def to_dict(self) -> dict: ...

class TensorKeyReader(TensorKey):
    def as_builder(self) -> TensorKeyBuilder: ...

class TensorKeyBuilder(TensorKey):
    @staticmethod
    def from_dict(dictionary: dict) -> TensorKeyBuilder: ...
    def copy(self) -> TensorKeyBuilder: ...
    def to_bytes(self) -> bytes: ...
    def to_bytes_packed(self) -> bytes: ...
    def to_segments(self) -> list[bytes]: ...
    def as_reader(self) -> TensorKeyReader: ...
    @staticmethod
    def write(file: BufferedWriter) -> None: ...
    @staticmethod
    def write_packed(file: BufferedWriter) -> None: ...

class Request:
    class Input:
        inputKeys: Sequence[TensorKey | TensorKeyBuilder | TensorKeyReader]
        modelData: bytes
        def which(self) -> Literal["inputKeys", "modelData"]: ...
        @staticmethod
        @contextmanager
        def from_bytes(
            data: bytes,
            traversal_limit_in_words: int | None = ...,
            nesting_limit: int | None = ...,
        ) -> Iterator[Request.InputReader]: ...
        @staticmethod
        def from_bytes_packed(
            data: bytes,
            traversal_limit_in_words: int | None = ...,
            nesting_limit: int | None = ...,
        ) -> Request.InputReader: ...
        @staticmethod
        def new_message() -> Request.InputBuilder: ...
        def to_dict(self) -> dict: ...

    class InputReader(Request.Input):
        inputKeys: Sequence[TensorKeyReader]
        def as_builder(self) -> Request.InputBuilder: ...

    class InputBuilder(Request.Input):
        inputKeys: Sequence[TensorKey | TensorKeyBuilder | TensorKeyReader]
        @staticmethod
        def from_dict(dictionary: dict) -> Request.InputBuilder: ...
        def copy(self) -> Request.InputBuilder: ...
        def to_bytes(self) -> bytes: ...
        def to_bytes_packed(self) -> bytes: ...
        def to_segments(self) -> list[bytes]: ...
        def as_reader(self) -> Request.InputReader: ...
        @staticmethod
        def write(file: BufferedWriter) -> None: ...
        @staticmethod
        def write_packed(file: BufferedWriter) -> None: ...

    class Output:
        outputKeys: Sequence[TensorKey | TensorKeyBuilder | TensorKeyReader]
        modelOutput: None
        def which(self) -> Literal["outputKeys", "modelOutput"]: ...
        @staticmethod
        @contextmanager
        def from_bytes(
            data: bytes,
            traversal_limit_in_words: int | None = ...,
            nesting_limit: int | None = ...,
        ) -> Iterator[Request.OutputReader]: ...
        @staticmethod
        def from_bytes_packed(
            data: bytes,
            traversal_limit_in_words: int | None = ...,
            nesting_limit: int | None = ...,
        ) -> Request.OutputReader: ...
        @staticmethod
        def new_message() -> Request.OutputBuilder: ...
        def to_dict(self) -> dict: ...

    class OutputReader(Request.Output):
        outputKeys: Sequence[TensorKeyReader]
        def as_builder(self) -> Request.OutputBuilder: ...

    class OutputBuilder(Request.Output):
        outputKeys: Sequence[TensorKey | TensorKeyBuilder | TensorKeyReader]
        @staticmethod
        def from_dict(dictionary: dict) -> Request.OutputBuilder: ...
        def copy(self) -> Request.OutputBuilder: ...
        def to_bytes(self) -> bytes: ...
        def to_bytes_packed(self) -> bytes: ...
        def to_segments(self) -> list[bytes]: ...
        def as_reader(self) -> Request.OutputReader: ...
        @staticmethod
        def write(file: BufferedWriter) -> None: ...
        @staticmethod
        def write_packed(file: BufferedWriter) -> None: ...

    class Device:
        deviceType: Device
        noDevice: None
        def which(self) -> Literal["deviceType", "noDevice"]: ...
        @staticmethod
        @contextmanager
        def from_bytes(
            data: bytes,
            traversal_limit_in_words: int | None = ...,
            nesting_limit: int | None = ...,
        ) -> Iterator[Request.DeviceReader]: ...
        @staticmethod
        def from_bytes_packed(
            data: bytes,
            traversal_limit_in_words: int | None = ...,
            nesting_limit: int | None = ...,
        ) -> Request.DeviceReader: ...
        @staticmethod
        def new_message() -> Request.DeviceBuilder: ...
        def to_dict(self) -> dict: ...

    class DeviceReader(Request.Device):
        def as_builder(self) -> Request.DeviceBuilder: ...

    class DeviceBuilder(Request.Device):
        @staticmethod
        def from_dict(dictionary: dict) -> Request.DeviceBuilder: ...
        def copy(self) -> Request.DeviceBuilder: ...
        def to_bytes(self) -> bytes: ...
        def to_bytes_packed(self) -> bytes: ...
        def to_segments(self) -> list[bytes]: ...
        def as_reader(self) -> Request.DeviceReader: ...
        @staticmethod
        def write(file: BufferedWriter) -> None: ...
        @staticmethod
        def write_packed(file: BufferedWriter) -> None: ...
    modelKey: str
    input: Request.Input | Request.InputBuilder | Request.InputReader
    output: Request.Output | Request.OutputBuilder | Request.OutputReader
    device: Request.Device | Request.DeviceBuilder | Request.DeviceReader
    replyChannel: ChannelDescriptor | ChannelDescriptorBuilder | ChannelDescriptorReader
    @overload
    def init(self, name: Literal["input"]) -> Input: ...
    @overload
    def init(self, name: Literal["output"]) -> Output: ...
    @overload
    def init(self, name: Literal["device"]) -> Device: ...
    @overload
    def init(self, name: Literal["replyChannel"]) -> ChannelDescriptor: ...
    @staticmethod
    @contextmanager
    def from_bytes(
        data: bytes,
        traversal_limit_in_words: int | None = ...,
        nesting_limit: int | None = ...,
    ) -> Iterator[RequestReader]: ...
    @staticmethod
    def from_bytes_packed(
        data: bytes,
        traversal_limit_in_words: int | None = ...,
        nesting_limit: int | None = ...,
    ) -> RequestReader: ...
    @staticmethod
    def new_message() -> RequestBuilder: ...
    def to_dict(self) -> dict: ...

class RequestReader(Request):
    input: Request.InputReader
    output: Request.OutputReader
    device: Request.DeviceReader
    replyChannel: ChannelDescriptorReader
    def as_builder(self) -> RequestBuilder: ...

class RequestBuilder(Request):
    input: Request.Input | Request.InputBuilder | Request.InputReader
    output: Request.Output | Request.OutputBuilder | Request.OutputReader
    device: Request.Device | Request.DeviceBuilder | Request.DeviceReader
    replyChannel: ChannelDescriptor | ChannelDescriptorBuilder | ChannelDescriptorReader
    @staticmethod
    def from_dict(dictionary: dict) -> RequestBuilder: ...
    def copy(self) -> RequestBuilder: ...
    def to_bytes(self) -> bytes: ...
    def to_bytes_packed(self) -> bytes: ...
    def to_segments(self) -> list[bytes]: ...
    def as_reader(self) -> RequestReader: ...
    @staticmethod
    def write(file: BufferedWriter) -> None: ...
    @staticmethod
    def write_packed(file: BufferedWriter) -> None: ...

class Response:
    class Result:
        keys: Sequence[TensorKey | TensorKeyBuilder | TensorKeyReader]
        data: bytes
        def which(self) -> Literal["keys", "data"]: ...
        @staticmethod
        @contextmanager
        def from_bytes(
            data: bytes,
            traversal_limit_in_words: int | None = ...,
            nesting_limit: int | None = ...,
        ) -> Iterator[Response.ResultReader]: ...
        @staticmethod
        def from_bytes_packed(
            data: bytes,
            traversal_limit_in_words: int | None = ...,
            nesting_limit: int | None = ...,
        ) -> Response.ResultReader: ...
        @staticmethod
        def new_message() -> Response.ResultBuilder: ...
        def to_dict(self) -> dict: ...

    class ResultReader(Response.Result):
        keys: Sequence[TensorKeyReader]
        def as_builder(self) -> Response.ResultBuilder: ...

    class ResultBuilder(Response.Result):
        keys: Sequence[TensorKey | TensorKeyBuilder | TensorKeyReader]
        @staticmethod
        def from_dict(dictionary: dict) -> Response.ResultBuilder: ...
        def copy(self) -> Response.ResultBuilder: ...
        def to_bytes(self) -> bytes: ...
        def to_bytes_packed(self) -> bytes: ...
        def to_segments(self) -> list[bytes]: ...
        def as_reader(self) -> Response.ResultReader: ...
        @staticmethod
        def write(file: BufferedWriter) -> None: ...
        @staticmethod
        def write_packed(file: BufferedWriter) -> None: ...
    status: int
    statusMessage: str
    result: Response.Result | Response.ResultBuilder | Response.ResultReader
    def init(self, name: Literal["result"]) -> Result: ...
    @staticmethod
    @contextmanager
    def from_bytes(
        data: bytes,
        traversal_limit_in_words: int | None = ...,
        nesting_limit: int | None = ...,
    ) -> Iterator[ResponseReader]: ...
    @staticmethod
    def from_bytes_packed(
        data: bytes,
        traversal_limit_in_words: int | None = ...,
        nesting_limit: int | None = ...,
    ) -> ResponseReader: ...
    @staticmethod
    def new_message() -> ResponseBuilder: ...
    def to_dict(self) -> dict: ...

class ResponseReader(Response):
    result: Response.ResultReader
    def as_builder(self) -> ResponseBuilder: ...

class ResponseBuilder(Response):
    result: Response.Result | Response.ResultBuilder | Response.ResultReader
    @staticmethod
    def from_dict(dictionary: dict) -> ResponseBuilder: ...
    def copy(self) -> ResponseBuilder: ...
    def to_bytes(self) -> bytes: ...
    def to_bytes_packed(self) -> bytes: ...
    def to_segments(self) -> list[bytes]: ...
    def as_reader(self) -> ResponseReader: ...
    @staticmethod
    def write(file: BufferedWriter) -> None: ...
    @staticmethod
    def write_packed(file: BufferedWriter) -> None: ...

class TensorDescriptor:
    dimensions: Sequence[int]
    order: Order
    dataType: NumericalType
    @staticmethod
    @contextmanager
    def from_bytes(
        data: bytes,
        traversal_limit_in_words: int | None = ...,
        nesting_limit: int | None = ...,
    ) -> Iterator[TensorDescriptorReader]: ...
    @staticmethod
    def from_bytes_packed(
        data: bytes,
        traversal_limit_in_words: int | None = ...,
        nesting_limit: int | None = ...,
    ) -> TensorDescriptorReader: ...
    @staticmethod
    def new_message() -> TensorDescriptorBuilder: ...
    def to_dict(self) -> dict: ...

class TensorDescriptorReader(TensorDescriptor):
    def as_builder(self) -> TensorDescriptorBuilder: ...

class TensorDescriptorBuilder(TensorDescriptor):
    @staticmethod
    def from_dict(dictionary: dict) -> TensorDescriptorBuilder: ...
    def copy(self) -> TensorDescriptorBuilder: ...
    def to_bytes(self) -> bytes: ...
    def to_bytes_packed(self) -> bytes: ...
    def to_segments(self) -> list[bytes]: ...
    def as_reader(self) -> TensorDescriptorReader: ...
    @staticmethod
    def write(file: BufferedWriter) -> None: ...
    @staticmethod
    def write_packed(file: BufferedWriter) -> None: ...

class Tensor:
    tensorData: bytes
    tensorDescriptor: TensorDescriptor | TensorDescriptorBuilder | TensorDescriptorReader
    def init(self, name: Literal["tensorDescriptor"]) -> TensorDescriptor: ...
    @staticmethod
    @contextmanager
    def from_bytes(
        data: bytes,
        traversal_limit_in_words: int | None = ...,
        nesting_limit: int | None = ...,
    ) -> Iterator[TensorReader]: ...
    @staticmethod
    def from_bytes_packed(
        data: bytes,
        traversal_limit_in_words: int | None = ...,
        nesting_limit: int | None = ...,
    ) -> TensorReader: ...
    @staticmethod
    def new_message() -> TensorBuilder: ...
    def to_dict(self) -> dict: ...

class TensorReader(Tensor):
    tensorDescriptor: TensorDescriptorReader
    def as_builder(self) -> TensorBuilder: ...

class TensorBuilder(Tensor):
    tensorDescriptor: TensorDescriptor | TensorDescriptorBuilder | TensorDescriptorReader
    @staticmethod
    def from_dict(dictionary: dict) -> TensorBuilder: ...
    def copy(self) -> TensorBuilder: ...
    def to_bytes(self) -> bytes: ...
    def to_bytes_packed(self) -> bytes: ...
    def to_segments(self) -> list[bytes]: ...
    def as_reader(self) -> TensorReader: ...
    @staticmethod
    def write(file: BufferedWriter) -> None: ...
    @staticmethod
    def write_packed(file: BufferedWriter) -> None: ...
